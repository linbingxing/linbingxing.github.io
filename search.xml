<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>了解Redis知识（三）</title>
      <link href="/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><p>在现实的生产环境中，我们不可能只启动一台Redis实例，所以就需要了解Redis的集群部署，我们知道Redis的部署可以通过以下几种模式。</p><ul><li>主从模式(RDB文件复制到从服务器)</li><li>哨兵模式</li><li>集群模式</li></ul><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><h3 id="1-服务架构"><a href="#1-服务架构" class="headerlink" title="1. 服务架构"></a>1. <strong>服务架构</strong></h3><p>   <img src="C:%5CUsers%5CPC4%5CDesktop%5CTIM%E6%88%AA%E5%9B%BE20190504004640.png" alt="主从服务架构"></p><h3 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. <strong>实现原理</strong></h3><p>   Redis的主从模式，主要有三种复制模式，全量复制、增量复制、无磁盘复制。</p><p>   全量复制：一般在初始化的时候，比如在新加入从节点的时候，主节点会把数据全量复制到从节点。</p><p>   增量复制：在全量复制完以后，主节点的更新操作就会以增量方式进行处理。</p><p>   无磁盘复制：主节点不在生成RDB文件发送到从节点，而是直接通过内存数据进行发送，版本2.8以后提供，配置参数repl-diskless-sync</p><p>   主从复制功能的详细步骤可以分为7个步骤：</p><ul><li><p>设置主服务器的地址和端口</p></li><li><p>建立套接字连接</p></li><li><p>发送PING命令</p></li><li><p>身份验证</p></li><li><p>发送端口信息</p></li><li><p>全量同步</p></li><li><p>增量同步-命令传播</p><p> <img src="C:%5CUsers%5CPC4%5CDesktop%5CTIM%E6%88%AA%E5%9B%BE20190504174231.png" alt="同步流程"></p><p> 全量同步的步骤如下：</p></li><li><p>主节点收到从服务器的全量重同步请求时，主服务器便开始执行bgsave命令，同时用一个缓冲区记录从现在开始执行的所有写命令。</p></li><li><p>当主服务器的bgsave命令执行完毕后，会将生成的RDB文件发送给从服务器。从服务器接收到RDB文件时，会将数据文件保存到硬盘，然后加载到内存中。</p></li><li><p>主服务器将缓冲区所有缓存的命令发送到从服务器，从服务器接收并执行这些命令，将从服务器同步至主服务器相同的状态。</p><p> 增量同步：当全量同步完以后，redis后面开始进行增量同步。那么怎么进行增量同步呢? 其实也就是全量同步的第三步骤，将主服务器的操作命令发送到从服务器执行命令。那如何能保证从服务器完整接收并执行命令呢? 需要先了解一下几个概念：</p></li><li><p>运行ID（每个Redis实例都会生成一个运行id)<br>当从服务器对主服务器进行初次复制时，主服务器会发送自己的运行ID给从服务器。<br>当从服务器断线重连时，会将之前主服务器的运行ID发送给当前连接的主服务器。这时候会出现下面两种情况</p><ol><li>运行ID和主服务器不一致，说明之前连接的主服务器与本次连接不同，开始执行全量重同步操作。</li><li>运行ID和主服务器一致，主服务器可以尝试执行部分重同步操作。</li></ol></li><li><p>复制偏移量</p><p>从主服务器的复制信息可以看到从服务器slave0和slave1都有一个参数offset，这个参数就是从服务器的复制偏移量。master_repl_offset这个参数就是主服务器的偏移量，slave_repl_offset是从服务器的偏移量。如下图。通过两者的对比，就可以知道命令是否丢失，丢失则补发复制偏移量相差的字节命令。</p><p><img src="C:%5CUsers%5CPC4%5CDesktop%5CTIM%E6%88%AA%E5%9B%BE20190505091431.png" alt></p><p><img src="C:%5CUsers%5CPC4%5CDesktop%5CTIM%E6%88%AA%E5%9B%BE20190505092504.png" alt="TIM截图20190505092504"></p></li><li><p>复制缓冲区</p><p> ​          在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区。复制缓冲区里面会保存着一部分最传播的写命令和每个字节相应的复制偏移量。因为复制缓冲区的大小是有限制的，所以保存的数据也是有限制的。如果从服务器与主服务器的复制偏移量相差的数据大于复制缓冲去存储的数据时，同样不会执行部分重同步，而会去执行全量同步。</p><p> ​     </p></li></ul><h3 id="3-部署配置"><a href="#3-部署配置" class="headerlink" title="3. 部署配置"></a>3. <strong>部署配置</strong></h3><ol><li><p>环境说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统：CentOS-7-x86_64</span><br><span class="line">redis版本：5.0.4</span><br><span class="line">ip：192.168.175.101</span><br><span class="line">redis节点：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.175.101：6379 master</span><br><span class="line">   192.168.175.101：6380 slave</span><br><span class="line">   192.168.175.101：6381 slave</span><br></pre></td></tr></table></figure></li><li><p>修改配置，并启动</p><p>将redis.conf复制两份，修改port、pidfile、slaveof，其他保持默认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf redis_6380.conf</span><br><span class="line">cp redis.conf redis_6381.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改port、pidfile、添加 slaveof</span></span><br><span class="line">vi redis-6380.conf</span><br><span class="line">    port 6380</span><br><span class="line">    protected-mode no</span><br><span class="line">    masterauth 123456</span><br><span class="line">    requirepass 123456</span><br><span class="line">    pidfile /var/run/redis-6380.pid</span><br><span class="line">    slaveof 192.168.175.101 6379</span><br><span class="line"></span><br><span class="line">vi redis-6381.conf</span><br><span class="line">    port 6381</span><br><span class="line">    protected-mode no</span><br><span class="line">    masterauth 123456</span><br><span class="line">    requirepass 123456</span><br><span class="line">    pidfile /var/run/redis-6381.pid</span><br><span class="line">    slaveof 192.168.175.101 6379</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">启动master和2个slave</span></span><br><span class="line">./src/redis-server redis.conf </span><br><span class="line">./src/redis-server redis-6380.conf </span><br><span class="line">./src/redis-server redis-6381.conf</span><br></pre></td></tr></table></figure></li><li><p>查看是否部署成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开1个shell窗口，登录主节点</span></span><br><span class="line">[root@centos101 redis-5.0.4]# ./src/redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=84,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=84,lag=0</span><br><span class="line">master_replid:083a4365862bb1bf32fcfae8f3c678d30b07b821</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:84</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:84</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到当前节点为主节点，有两个子节点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">我们在看一下子节点的信息，可以看到子节点有对应主节点的ip、端口</span></span><br><span class="line">[root@centos101 redis-5.0.4]# ./src/redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.175.101</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:4438</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:083a4365862bb1bf32fcfae8f3c678d30b07b821</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:4438</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:4438</span><br></pre></td></tr></table></figure></li><li><p>测试一下</p><p>现在主服务器6379输入命令，可以看到6380可以获取到数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@centos101 redis-5.0.4]# ./src/redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; set test 123456</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@centos101 redis-5.0.4]#  ./src/redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; get test</span><br><span class="line">"123456"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">尝试在6380设置值，可以看到报错，只能读不能写</span></span><br><span class="line">[root@centos101 redis-5.0.4]#  ./src/redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; set test3 123455</span><br><span class="line">(error) READONLY You can't write against a read only replica.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试主节点如何复制数据到从节点，可以看主节点的更新操作命令会同步到从节点</span></span><br><span class="line">127.0.0.1:6380&gt; replconf listening-port 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; sync</span><br><span class="line">Entering replica output mode...  (press Ctrl-C to quit)</span><br><span class="line">SYNC with master, discarding 226 bytes of bulk transfer...</span><br><span class="line">SYNC done. Logging commands from master.</span><br><span class="line">"set","test5","123123"</span><br><span class="line">"PING"</span><br><span class="line">"set","ggg","123123"</span><br></pre></td></tr></table></figure></li><li><p>关于主从复制的几点问题</p><ul><li>了解Redis是如何保证主从服务器一致处于连接状态以及命令是否丢失？</li><li>如何确保主服务器进行增量同步时，不影响性能？</li></ul></li><li><p>配置相关参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">slaveof 192.168.175.101 6379</span><br><span class="line"># masterauth &lt;主服务器Redis密码&gt;</span><br><span class="line">masterauth 123456</span><br><span class="line"></span><br><span class="line"># 当slave丢失master或者同步正在进行时，如果发生对slave的服务请求</span><br><span class="line"># yes则slave依然正常提供服务</span><br><span class="line"># no则slave返回client错误：&quot;SYNC with master in progress&quot;</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># 指定slave是否只读</span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"># 无硬盘复制功能</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"># 无硬盘复制功能间隔时间</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"># 从服务器发送PING命令给主服务器的周期</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"></span><br><span class="line"># 超时时间</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line"># 是否禁用socket的NO_DELAY选项</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"># 设置主从复制容量大小，这个backlog 是一个用来在 slaves 被断开连接时存放 slave 数据的 buffer</span><br><span class="line"># repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line"># master 不再连接 slave时backlog的存活时间。</span><br><span class="line"># repl-backlog-ttl 3600</span><br><span class="line"></span><br><span class="line"># slave的优先级</span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"># 未达到下面两个条件时，写操作就不会被执行</span><br><span class="line"># 最少包含的从服务器</span><br><span class="line"># min-slaves-to-write 3</span><br><span class="line"># 延迟值</span><br><span class="line"># min-slaves-max-lag 0</span><br><span class="line"></span><br><span class="line">#设置缓冲区的大小</span><br><span class="line">repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line"># repl-backlog-ttl 3600</span><br></pre></td></tr></table></figure></li></ol><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解Redis知识（二）</title>
      <link href="/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的持久化原理"><a href="#Redis的持久化原理" class="headerlink" title="Redis的持久化原理"></a>Redis的持久化原理</h1><p><a href="https://redis.io/topics/persistence" target="_blank" rel="noopener">持久化官方文档</a></p><p><a href="http://redisdoc.com/topic/persistence.html" target="_blank" rel="noopener">持久化中文文档</a></p><p>Redis提供了两种持久化方式：</p><ul><li>RDB(快照）：在指定的时间间隔能对你的数据进行快照存储。</li><li>AOP(追加文件）：记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据。</li></ul><h2 id="快照-RDB"><a href="#快照-RDB" class="headerlink" title="快照 RDB"></a>快照 RDB</h2><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h3><p>​    在默认情况下，Redis将数据库快照保存在dump.rdb的二进制文件中，这种持久化方式叫快照（snapshot）。</p><p>   当 Redis 需要保存 <code>dump.rdb</code> 文件时， 服务器执行以下操作：</p><ol><li><p>Redis 调用 fork() ，同时拥有父进程和子进程。 </p></li><li><p>子进程将数据集写入到一个临时 RDB 文件中。</p></li><li><p>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</p><p>在Redis中RDB持久化的触发分为两种：自己手动触发与Redis定时触发。</p><p>手动触发可以通过以下两个命令：</p></li></ol><ul><li>save：会阻塞当前Redis服务器，直到持久化完成，线上应该禁止使用。</li><li>bgsave：该触发方式会fork一个子进程，由子进程负责持久化过程，因此阻塞只会发生在fork子进程的时候。</li></ul><p>自动触发主要通过以下几种情况：</p><ul><li>根据配置文件的save m n配置规则触发。</li><li>从节点全量复制时，主节点发送rdb文件给从节点完成复制操作，主节点会触发 <code>bgsave</code>；</li><li>执行 <code>debug reload</code> 时；</li><li>执行 <code>shutdown</code>时，如果没有开启aof，也会触发。</li></ul><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><ol><li>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份。</li><li>RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心。</li><li>RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。</li><li>比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</li></ol><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h3><ol><li>RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</li><li>RDB使用<code>fork()</code>产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。</li></ol><h3 id="4-参数配置"><a href="#4-参数配置" class="headerlink" title="4. 参数配置"></a>4. 参数配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># RDB文件名，默认为dump.rdb。</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 文件存放的目录，AOF文件同样存放在此目录下。默认为当前工作目录。</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># RDB定时触发规则配置，可配置多个</span><br><span class="line">save 900 1 #900秒后至少1个key有变动</span><br><span class="line">save 300 10 #300秒后至少10个key有变动</span><br><span class="line">save 60 10000 #60秒后至少10000个key有变动</span><br><span class="line"># 禁用快照保存的功能</span><br><span class="line">save &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 如果持久化出错，主进程是否停止写入，建议开启保护持久化的数据一致性问题</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># 是否压缩 建议没有必要开启</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 导入时是否检查</span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><h2 id="追加式文件（AOF文件）"><a href="#追加式文件（AOF文件）" class="headerlink" title="追加式文件（AOF文件）"></a>追加式文件（<code>AOF</code>文件）</h2><h3 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><p>​     当Redis接受到会修改数据集的命令时，就会把命令追加到AOF文件里，当你重启Redis时，AOF里的命令会被重新执行一次，重建数据。</p><p>AOF主要分为两个步骤：一是对修改命令的实时写入，二是对AOF重写。AOF重写是为了减少aof文件的大小，可以手动或者自动触发,</p><p><strong>手动触发：</strong> <code>bgrewriteaof</code>。</p><p><strong>自动触发:</strong>  就是根据配置规则来触发，当然自动触发的整体时间还跟Redis的定时任务频率有关系。</p><p> AOF 重写的执行步骤：</p><ol><li>Redis 执行 <code>fork()</code> ，现在同时拥有父进程和子进程。</li><li>子进程开始将新 AOF 文件的内容写入到临时文件。</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li><li>搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/8/13/16530eac181d94c8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="重写流程图"></p><h3 id="2-优点-1"><a href="#2-优点-1" class="headerlink" title="2.优点"></a>2.优点</h3><ol><li>比RDB可靠。你可以制定不同的fsync策略：不进行fsync、每秒fsync一次和每次查询进行fsync。默认是每秒fsync一次。这意味着你最多丢失一秒钟的数据。</li><li>AOF日志文件是一个纯追加的文件。就算是遇到突然停电的情况，也不会出现日志的定位或者损坏问题。甚至如果因为某些原因（例如磁盘满了）命令只写了一半到日志文件里，我们也可以用<code>redis-check-aof</code>这个工具很简单的进行修复。</li><li>当AOF文件太大时，Redis会自动在后台进行重写。重写很安全，因为重写是在一个新的文件上进行，同时Redis会继续往旧的文件追加数据。新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完，Redis会把新旧文件进行切换，然后开始把数据写到新文件上。</li><li>AOF把操作命令以简单易懂的格式一条接一条的保存在文件里，很容易导出来用于恢复数据。例如我们不小心用<code>FLUSHALL</code>命令把所有数据刷掉了，只要文件没有被重写，我们可以把服务停掉，把最后那条命令删掉，然后重启服务，这样就能把被刷掉的数据恢复回来。 </li></ol><h3 id="3-缺点-1"><a href="#3-缺点-1" class="headerlink" title="3.缺点"></a>3.缺点</h3><ol><li>在相同的数据集下，AOF文件的大小一般会比RDB文件大。</li><li>在某些fsync策略下，AOF的速度会比RDB慢。通常fsync设置为每秒一次就能获得比较高的性能，而在禁止fsync的情况下速度可以达到RDB的水平。</li><li>在过去曾经发现一些很罕见的BUG导致使用AOF重建的数据跟原数据不一致的问题。</li></ol><h3 id="4-参数配置-1"><a href="#4-参数配置-1" class="headerlink" title="4.参数配置"></a>4.参数配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 是否开启aof</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 文件名称</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># 同步方式 </span><br><span class="line">#每秒fsync一次。速度快（2.4版本跟快照方式速度差不多），安全性不错（最多丢失1秒的数据）。</span><br><span class="line">appendfsync  everysec </span><br><span class="line"># appendfsync always 每当有新命令追加到AOF的时候调用fsync。速度最慢，但是最安全。</span><br><span class="line"># appendfysnc no  从不fsync，交由系统去处理。这个方式速度最快，但是安全性一般。</span><br><span class="line"></span><br><span class="line"># aof重写期间是否同步</span><br><span class="line">no-appendfsync-on-rewrite no </span><br><span class="line"></span><br><span class="line"># 重写触发配置</span><br><span class="line">auto-aof-rewrite-min-size 64MB</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"># 加载aof时如果有错如何处理,如果该配置启用，在加载时发现aof尾部不正确##是，会向客户端写入一个log，但是会继续执行，如果设置为 no ，发现错误就会停止，必须修复后才能重新加载</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line">#文件重写策略</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><p>   从上面我们知道Redis有两种持久化方式，那么持久化完以后，如何进行恢复数据呢?假如同时开始两种持久化方式，那么Redis是如何进行加载AOF文件、RDB文件的？ Redis会OF文件是否存在，如果不存在就尝试加载RDB。那么为什么会优先加载AOF呢？因为AOF保存的数据更完整，通过上面的分析我们知道AOF基本上最多损失1s的数据。</p><h2 id="从-RDB-持久化切换到-AOF-持久化"><a href="#从-RDB-持久化切换到-AOF-持久化" class="headerlink" title="从 RDB 持久化切换到 AOF 持久化"></a>从 RDB 持久化切换到 AOF 持久化</h2><ol><li><p>为最新的 <code>dump.rdb</code> 文件创建一个备份。</p></li><li><p>将备份放到一个安全的地方。</p></li><li><p>执行以下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis-cli&gt;</span><span class="bash"> CONFIG SET appendonly yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">redis-cli&gt;</span><span class="bash"> CONFIG SET save <span class="string">""</span></span></span><br></pre></td></tr></table></figure></li><li><p>确保命令执行之后，数据库的键的数量没有改变。</p></li><li><p>确保写命令会被正确地追加到 AOF 文件的末尾。</p></li></ol><h2 id="备份-Redis-数据"><a href="#备份-Redis-数据" class="headerlink" title="备份 Redis 数据"></a>备份 Redis 数据</h2><ul><li>创建一个定期任务（cron job）， 每小时将一个 RDB 文件备份到一个文件夹， 并且每天将一个 RDB 文件备份到另一个文件夹。</li><li>确保快照的备份都带有相应的日期和时间信息， 每次执行定期任务脚本时， 使用 <code>find</code> 命令来删除过期的快照： 比如说， 你可以保留最近 48 小时内的每小时快照， 还可以保留最近一两个月的每日快照。</li><li>至少每天一次， 将 RDB 备份到你的数据中心之外， 或者至少是备份到你运行 Redis 服务器的物理机器之外。</li></ul><h2 id="性能与实践"><a href="#性能与实践" class="headerlink" title="性能与实践"></a>性能与实践</h2><ol><li>如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li><li>自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据；</li><li>单机如果部署多个实例，要防止多个机器同时运行持久化、重写操作，防止出现内存、CPU、IO资源竞争，让持久化变为串行；</li><li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li><li>RDB持久化与AOF持久化可以同时存在，配合使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解Redis知识（一）</title>
      <link href="/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/09/08/%E4%BA%86%E8%A7%A3Redis%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis知识总结（一）"><a href="#Redis知识总结（一）" class="headerlink" title="Redis知识总结（一）"></a>Redis知识总结（一）</h1><p>Redis的全称是：Remote Dictionary Server</p><p>Redis是一个开源（BSD许可），内存数据结构存储，可以用作数据库，缓存和消息代理。它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，具有半径查询和流的地理空间索引。Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性和使用Redis Cluster自动分区。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>基本类型及数据结构</li><li>Redis的过期策略、内存淘汰策略</li><li>数据如何持久化</li><li>redis的内存回收策略</li><li>redis如何使用lua脚本</li><li>redis集群部署</li><li>分布式锁实现</li></ul><h2 id="一、基本类型及数据结构"><a href="#一、基本类型及数据结构" class="headerlink" title="一、基本类型及数据结构"></a>一、基本类型及数据结构</h2><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><p>可以存储字符串、整数、浮点数、JSON、XML、二进制等，最大不能超过521M，可变的动态字符串。</p><ol><li><p><strong>常用命令</strong>：set、get、mset、mget、setex、setnx、incr、decr，具体使用方法网上很多，不多详述。</p></li><li><p><strong>内部编码</strong>：</p><p>在 Redis 中字符串类型的内部编码有 3 种：</p><ul><li>int：8个字节的长整型</li><li>embstr：小于等于39个字节的字符串</li><li>raw：大于39个字节的字符串</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li>计数器，利用incr、decr等命令实现计算器</li><li>共享session</li><li>限流、限速</li></ul></li><li><p><strong>数据结构：</strong></p><ul><li>SDS （Simple Dynamic String，简单动态字符串）是 Redis 底层所使用的字符串表示， 几乎所有的 Redis 模块中都用了 sds。</li><li>当字符串对象保存的是字符串时， 它包含的才是 sds 值， 否则的话， 它就是一个 <code>long</code> 类型的值。</li><li>sds 既可高效地实现追加和长度计算， 同时是二进制安全的。</li></ul></li><li><p><strong>参考资料:</strong></p></li></ol><p>​         <a href="http://zhangtielei.com/posts/blog-redis-sds.html" target="_blank" rel="noopener">Redis内部数据结构详解(2)——sds</a></p><p>​         <a href="https://redisbook.readthedocs.io/en/latest/internal-datastruct/sds.html" target="_blank" rel="noopener">简单动态字符串</a></p><h3 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h3><p>一个列表可以有序地存储多个字符串，并且列表里的元素是可以重复的。可以对列表的两端进行插入或者弹出元素操作。</p><p> 特点如下：</p><ol><li><p>列表中所有的元素都是有序的，所以它们是可以通过索引获取的，也就是 lindex 命令。并且在 Redis 中列表类型的索引是从 0 开始的。</p></li><li><p>列表中的元素是可以重复的，也就是说在 Redis 列表类型中，可以保存同名元素。</p><p><strong>常用命令</strong></p><ul><li>从右边/左边插入元素   rpush/lpush key value [value …]</li><li>向某个元素前或者后插入元素   linsert key BEFORE|AFTER pivot value</li><li>获取指定范围内的元素列表 lrange key start stop</li><li>获取列表中指定索引下标的元素 lindex key index</li><li>从列表右侧/左侧弹出元素 rpop/lpop key</li><li>删除指定元素 lrem key count value</li><li>按照索引范围修剪列表 ltrim key start stop</li><li>阻塞操作 ,阻塞等待timeout秒弹出元素 blpop/brpop key timeout</li></ul><p><strong>数据结构</strong></p><p>列表中的内部数据结构有两种，它们分别是：</p><ul><li>ziplist（压缩列表）：当列表中元素个数小于 512（默认）个，并且列表中每个元素的值都小于 64（默认）个字节时，Redis 会选择用 ziplist 来作为列表的内部实现以减少内存的使用。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。相关参数修改：list-max-ziplist-entried（元素个数）、list-max-ziplist-value(元素值)。</li><li>quicklist（快速列表）：当列表数据无法满足ziplist条件时，Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</li></ul><p><strong>使用场景</strong></p><ul><li>消息队列</li></ul><p><strong>其他</strong></p></li></ol><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>set集合与列表一样，也是可以保存多个字符串</p><p>特点如下：</p><ul><li>set 中的元素是不可以重复的，而 list 是可以保存重复元素的。</li><li>set 中的元素是无序的，而 list 中的元素是有序的。</li><li>set 中的元素不能通过索引下标获取元素，而 list 中的元素则可以通过索引下标获取元素。</li><li>多个set可以取交集、并集、差集。</li></ul><ol><li><p><strong>常用命令</strong> </p><ul><li><p>添加元素 sadd key member [member…]</p></li><li><p>删除元素 srem key member [member…]</p></li><li><p>计算元素个数 scard key </p></li><li><p>判读元素是否在集合中 sismember key member</p></li><li><p>随机从 set 中返回指定个数元素 srandmember key [count]</p></li><li><p>从集合中随机弹出元素 spop key [count]</p></li><li><p>获取所有元素 smember key</p></li><li><p>集合的交集 sinter key [key …]</p></li><li><p>集合的并集 sunion key [key …]</p></li><li><p>集合的差集 sdiff key [key …]</p></li><li><p>将集合的交集、并集、差集的结果保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore destination key [key ...]</span><br><span class="line">sunionstore destination key [key ...]</span><br><span class="line">sdiffstore destination key [key ...]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数据结构</strong></p><p>集合的内部数据结构有两种：</p><ul><li>intset(整数集合)：当集合中的元素都是整数，并且集合中的元素个数小于 512 个时，Redis 会选用 intset 作为底层内部实现。set-max-intset-entries 参数来设置上述中的默认参数。</li><li>hashtable(哈希表)：当上述条件不满足时，Redis 会采用 hashtable 作为底层实现。</li></ul></li><li><p><strong>使用场景</strong></p><p>标签（tag）</p><p>一个用户对娱乐、体育比较感兴趣，另一个可能对新闻感兴<br>趣，这些兴趣就是标签，有了这些数据就可以得到同一标签的人，以及用户的共同爱好的标签，<br>这些数据对于用户体验以及曾强用户粘度比较重要。</p></li></ol><h3 id="Hash散列"><a href="#Hash散列" class="headerlink" title="Hash散列"></a>Hash散列</h3><p>redis的哈希跟JAVA语言的HashMap类似，都是键值对结构。使用二维结构，第一维是数组，第二维是链表，hash的内容key和value存放在链表中，数组里存放的是链表的头指针。通过key查找元素时，先计算key的hashcode，然后用hashcode对数组的长度进行取模定位到链表的表头，再对链表进行遍历获取到相应的value值，链表的作用就是用来将产生了「hash碰撞」的元素串起来。</p><p><a href="https://user-gold-cdn.xitu.io/2018/7/23/164c4dcd14c00534?imageslim" target="_blank" rel="noopener">hash存储结构</a></p><ol><li><p><strong>常用命令</strong></p><ul><li>设置值 hset key field value</li><li>获取值hget key field</li><li>删除值 hdel key  field [field …]</li><li>计算field个数 hlen key </li><li>批量设置值 hmset key field value [field value…]</li><li>批量获取值 hmget key field</li><li>判断field是否存在 hexists key field</li><li>获取所有field  hkeys key</li><li>获取所有value   hvals key </li><li>获取所有field -value   hgetall  key</li><li>计数  hincrby key field increment  hincrbyfloat key field increment</li></ul></li><li><p><strong>数据结构</strong></p><p>Redis 哈希类型的数据结构类型包含两种：</p><ul><li>ziplist（压缩列表）：当哈希类型中元素个数小于 hash-max-ziplist-entries 配置（默认 512 个），同时所有值都小于 hash-max-ziplist-value 配置（默认 64 字节）时，Redis 会使用 ziplist 作为哈希的内部实现。</li><li>hashtable（哈希表）：当上述条件不满足时，Redis 则会采用 hashtable 作为哈希的内部实现。</li></ul></li><li><p><strong>使用场景</strong></p><ul><li>存储对象信息，用户信息、登录信息</li></ul></li><li><p><strong>其他</strong></p></li></ol><h3 id="Zset有序集合"><a href="#Zset有序集合" class="headerlink" title="Zset有序集合"></a>Zset有序集合</h3><p> Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的，但分数(score)却可以重复。</p><ol><li><p><strong>常用命令</strong></p><ul><li>设置值  zadd key [NX|XX] [CH] [INCR] score member [score member …]</li><li>计算成员个数 zcard key </li><li>计算成员分数 zscore  key   member</li><li>计算成员的排名 zrank/zrevrank  key member </li><li>删除元素  zrem key member [member …]</li><li>增加元素分数  zincrby key increment member </li><li>返回指定排名范围的元素 zrange/zrevrange  key start stop [WITHSCORES]</li><li>返回指定分数范围的元素  zrangebyscore/zrevrangebyscore key min max [WITHSCORES] [LIMIT offset count]</li><li>返回指定分数范围元素个数  zcount key min max</li><li>删除指定排名内的升序元素  zremrangebyrank key start stop </li><li>删除指定分数范围元素 zremrangebyscore key min max </li></ul></li><li><p><strong>数据结构</strong></p><p>有序集合内部的数据结构类型包含两种：</p><ul><li>ziplist(压缩列表)：当有序集合的元素个数小于 128 个(默认设置)，同时每个元素的值都小于 64 字节(默认设置)，Redis 会采用 ziplist 作为有序集合的内部实现，通过以下参数设置：zset-max-ziplist-entries 和 zset-max-ziplist-value。</li><li>skiplist(跳跃表)：当上述条件不满足时，Redis 会采用 skiplist 作为内部编码。</li></ul></li><li><p><strong>使用场景</strong>     </p><ul><li>排行榜</li><li></li></ul></li><li><p><strong>其他</strong></p></li></ol><h3 id="Bitmaps-位图"><a href="#Bitmaps-位图" class="headerlink" title="Bitmaps 位图"></a>Bitmaps 位图</h3><p>​    位图不是实际的数据类型，而是在String 字符串类型上定义的一组面向位的操作。位图的最大优势之一是它们在存储信息时通常可以节省大量空间。例如，在不同用户由增量用户ID表示的系统中，可以使用仅512 MB的内存记住40亿用户的单个位信息（例如，知道用户是否想要接收新闻通讯）。</p><ol><li><p><strong>常用命令</strong></p><ul><li>对 <code>key</code> 所储存的字符串值，设置或清除指定偏移量上的位(bit)  SETBIT key offset value</li><li>对 <code>key</code> 所储存的字符串值，获取指定偏移量上的位(bit)   GETBIT key offset</li></ul></li><li><p><strong>使用场景</strong></p><ul><li><p>用户在线状态</p></li><li><p>统计活跃用户</p></li><li><p>用户签到</p></li></ul></li><li><p><strong>参考资料</strong></p><p><a href="https://juejin.im/post/5a7dcad0f265da4e6f17d942#heading-21" target="_blank" rel="noopener">BitMap</a></p></li></ol><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><ol><li><p><strong>常用命令</strong></p><ul><li>添加指定元素到 HyperLogLog 中   pfadd key value </li><li>返回给定 HyperLogLog 的基数估算值  pfcount key </li><li>将多个 HyperLogLog 合并为一个 HyperLogLog  pfmerge destkey sourcekey [key …]</li></ul></li><li><p><strong>使用场景</strong></p><p>一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数。</p><ul><li>统计注册 IP 数</li><li>统计每日访问 IP 数</li><li>统计页面实时 UV 数</li><li>统计在线用户数</li><li>统计用户每天搜索不同词条的个数</li></ul></li></ol><h2 id="二、Redis的过期策略、内存淘汰策略"><a href="#二、Redis的过期策略、内存淘汰策略" class="headerlink" title="二、Redis的过期策略、内存淘汰策略"></a>二、Redis的过期策略、内存淘汰策略</h2><p>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理？</p><p>Redis keys的过期策略有两种，一种是消极处理，一种是积极处理。</p><ul><li>消极处理：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。<ul><li>积极处理：<ul><li>每秒执行10次，每次随机获取20个设置过期的key</li><li>清除其中已过期的key；</li><li>当超过25%的key过期，则重复第一步。</li></ul></li></ul></li></ul><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ul><p>配置参数：maxmemory-policy</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/09/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>学习单例模式的知识点总结</p><ul><li>私有化构造器</li><li>保证线程安全</li><li>延迟加载</li><li>防止序列化和反序列化破坏单例</li><li>防御反射攻击单例</li></ul><h1 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h1><p>在类加载时就完成了初始化，所以类加载较慢，但获取对象的速度快。 这种方式基于类加载机制避免了多线程的同步问题。但是，没有启动延迟加载的效果。</p><p>饿汉模式的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="懒汉模式（线程不安全）"><a href="#懒汉模式（线程不安全）" class="headerlink" title="懒汉模式（线程不安全）"></a>懒汉模式（线程不安全）</h1><p>懒汉模式申明了一个静态对象，在用户第一次调用时初始化，虽然节约了资源，但第一次加载时需要实例化，反映稍慢一些，而且在多线程不能正常工作。</p><p>懒汉模式的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> instance;  </span><br><span class="line">      &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="懒汉模式（线程安全）"><a href="#懒汉模式（线程安全）" class="headerlink" title="懒汉模式（线程安全）"></a>懒汉模式（线程安全）</h1><p>这种写法能够在多线程中很好的工作，但是每次调用getInstance方法时都需要进行同步，造成不必要的同步开销，而且大部分时候我们是用不到同步的，所以不建议用这种模式。</p><p>懒汉模式（线程安全）的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> instance;  </span><br><span class="line">      &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="双重检查模式-（DCL）"><a href="#双重检查模式-（DCL）" class="headerlink" title="双重检查模式 （DCL）"></a>双重检查模式 （DCL）</h1><p>这种写法在getSingleton方法中对singleton进行了两次判空，第一次是为了不必要的同步，第二次是在singleton等于null的情况下才创建实例，利用关键字volatile特性来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      &#125;   </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (instance== <span class="keyword">null</span>) &#123;  </span><br><span class="line">          <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (instance== <span class="keyword">null</span>) &#123;  </span><br><span class="line">              instance= <span class="keyword">new</span> Singleton();  </span><br><span class="line">          &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">return</span> singleton;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h1><p>第一次加载Singleton类时并不会初始化sInstance，只有第一次调用getInstance方法时虚拟机加载SingletonHolder 并初始化sInstance ，这样不仅能确保线程安全也能保证Singleton类的唯一性，所以推荐使用静态内部类单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.sInstance;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述讲的几种单例模式实现中，有一种情况下他们会重新创建对象，那就是反序列化，将一个单例实例对象写到磁盘再读回来，从而获得了一个实例。反序列化操作提供了readResolve方法，这个方法可以让开发人员控制对象的反序列化。在上述的几个方法示例中如果要杜绝单例对象被反序列化是重新生成对象，就必须加入如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h1><p>默认枚举实例的创建是线程安全的，并且在任何情况下都是单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">     INSTANCE;  </span><br><span class="line">     <span class="keyword">private</span> Object data;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.data =data;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> INSTANCE;</span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="使用容器实现单例模式"><a href="#使用容器实现单例模式" class="headerlink" title="使用容器实现单例模式"></a>使用容器实现单例模式</h1><p>使用容器方式，利用Map来实现对多个单例进行管理，在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。Spring在管理bean实例时，就是利用容器单例模式来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123; </span><br><span class="line">　　<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String,Object&gt;();</span><br><span class="line">　　<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; </span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Objectinstance)</span> </span>&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (!objMap.containsKey(key) ) &#123;</span><br><span class="line">　　　　　　objMap.put(key, instance) ;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">ObjectgetService</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> objMap.get(key) ;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ThreadLocal单例模式"><a href="#ThreadLocal单例模式" class="headerlink" title="ThreadLocal单例模式"></a>ThreadLocal单例模式</h1><p>利用ThreadLocal原理来保证线程内安全，在我们实现多数据动态源可以用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ThreadLocalSingleton&gt; threadLocalInstance = <span class="keyword">new</span> ThreadLocal&lt;ThreadLocalSingleton&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ThreadLocalSingleton <span class="title">initalValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocalSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> threadLocalInstance.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综合上面几种实现方式，针对单例模式需要考虑的几种因素进行对比</p><table><thead><tr><th>实现方式</th><th><strong>线程安全</strong></th><th><strong>并发性能好</strong></th><th><strong>延迟加载</strong></th><th><strong>序列化/反序列化安全</strong></th><th><strong>抵御反射攻击</strong></th></tr></thead><tbody><tr><td>饿汉式</td><td>Y</td><td>Y</td><td></td><td></td><td></td></tr><tr><td>懒汉式</td><td></td><td>Y</td><td>Y</td><td></td><td></td></tr><tr><td>懒汉式加锁</td><td>Y</td><td></td><td>Y</td><td></td><td></td></tr><tr><td>DCL</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr><tr><td>静态内部类</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr><tr><td>枚举</td><td>Y</td><td>Y</td><td></td><td>Y</td><td>Y</td></tr><tr><td>容器加锁</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
      <url>/2019/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="1、软件设计原则"><a href="#1、软件设计原则" class="headerlink" title="1、软件设计原则"></a>1、软件设计原则</h1><ol><li>开闭原则</li><li>单一职责原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特法则</li><li>里氏替换原则</li><li>合成复用原则</li></ol><h1 id="2、设计模式"><a href="#2、设计模式" class="headerlink" title="2、设计模式"></a>2、设计模式</h1><h2 id="1、创建型模式"><a href="#1、创建型模式" class="headerlink" title="1、创建型模式"></a>1、创建型模式</h2><ul><li><p>工厂方法模型</p></li><li><p>抽象工厂模式</p></li><li><p>单例模式</p><p>饿汉式单例</p><p>懒汉式单例</p></li><li><p>建造者模式</p></li><li><p>原型模式</p></li></ul><h2 id="2、结构型模式"><a href="#2、结构型模式" class="headerlink" title="2、结构型模式"></a>2、结构型模式</h2><ul><li>适配器模式</li><li>装饰者模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="3、行为型模式"><a href="#3、行为型模式" class="headerlink" title="3、行为型模式"></a>3、行为型模式</h2><ul><li>策略模式</li><li>模板模式</li><li>观察者模式</li><li>迭代子模式</li><li>责任链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/07/hello-world/"/>
      <url>/2019/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
