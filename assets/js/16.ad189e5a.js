(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{469:function(s,t,a){"use strict";a.r(t);var n=a(21),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"java-基础-反射机制详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-基础-反射机制详解"}},[s._v("#")]),s._v(" Java 基础 - 反射机制详解")]),s._v(" "),a("h2",{attrs:{id:"反射机制概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射机制概念"}},[s._v("#")]),s._v(" 反射机制概念")]),s._v(" "),a("p",[s._v("在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制。")]),s._v(" "),a("p",[s._v("利用 Java 的反射机制，可以做到以下：")]),s._v(" "),a("ul",[a("li",[s._v("在程序的运行态可以获取对象所属的类；")]),s._v(" "),a("li",[s._v("在程序的运行态可以构造类的对象实例；")]),s._v(" "),a("li",[s._v("在程序的运行时可以获取，或者修改类的成员属性；")]),s._v(" "),a("li",[s._v("在程序的运行态可以调用某个类，或者对象的方法；")]),s._v(" "),a("li",[s._v("在程序的运行态可以获取类的其他信息，比如描述修饰符、父类信息等；")])]),s._v(" "),a("h2",{attrs:{id:"反射的应用场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的应用场合"}},[s._v("#")]),s._v(" 反射的应用场合")]),s._v(" "),a("h2",{attrs:{id:"反射-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射-api"}},[s._v("#")]),s._v(" 反射 API")]),s._v(" "),a("p",[s._v("反射 API 用来生成 JVM 中的类、接口或则对象的信息。")]),s._v(" "),a("ol",[a("li",[s._v("Class 类：反射的核心类，可以获取类的属性，方法等信息。")]),s._v(" "),a("li",[s._v("Field 类： Java.lang.reflec 包中的类， 表示类的成员变量，可以用来获取和设置类之中的属性值。")]),s._v(" "),a("li",[s._v("Method 类： Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。")]),s._v(" "),a("li",[s._v("Constructor 类： Java.lang.reflec 包中的类，表示类的构造方法。")])]),s._v(" "),a("h2",{attrs:{id:"反射的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的使用"}},[s._v("#")]),s._v(" 反射的使用")]),s._v(" "),a("h3",{attrs:{id:"反射使用步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射使用步骤"}},[s._v("#")]),s._v(" 反射使用步骤")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("获取想要操作的类的 Class 对象，他是反射的核心，通过 Class 对象我们可以任意调用类的方法。")])]),s._v(" "),a("li",[a("p",[s._v("调用 Class 类中的方法，既就是反射的使用阶段。")])]),s._v(" "),a("li",[a("p",[s._v("使用反射 API 来操作这些信息。")])])]),s._v(" "),a("h3",{attrs:{id:"class类对象的获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class类对象的获取"}},[s._v("#")]),s._v(" Class类对象的获取")]),s._v(" "),a("p",[s._v("在类加载的时候，jvm会创建一个class对象")]),s._v(" "),a("p",[s._v("class对象是可以说是反射中最常用的，获取class对象的方式的主要有三种")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("根据类名：类名.class")])])]),s._v(" "),a("p",[s._v("​       "),a("code",[s._v("Class clazz=Person.class;")])]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("根据对象：对象.getClass()")])]),s._v(" "),a("p",[a("code",[s._v("Person p=new Person();")]),s._v(" "),a("code",[s._v("Class clazz=p.getClass();")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("根据全限定类名：Class.forName(全限定类名)")])]),s._v(" "),a("p",[a("code",[s._v('Class clazz=Class.forName("类的全路径"); (最常用)')])])])]),s._v(" "),a("p",[s._v("当我们获得了想要操作的类的 Class 对象后，可以通过 Class 类中的方法获取并查看该类中的方法\n和属性。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取 Person 类的 Class 对象")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"reflection.Person"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取 Person 类的所有方法信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" method"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredMethods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取 Person 类的所有成员属性信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Field")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" field"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredFields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Field")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("field"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取 Person 类的所有构造方法信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredConstructors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Constructor")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"constructor类及其用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor类及其用法"}},[s._v("#")]),s._v(" Constructor类及其用法")]),s._v(" "),a("blockquote",[a("p",[s._v("Constructor类存在于反射包(java.lang.reflect)中，反映的是Class 对象所表示的类的构造方法。")])]),s._v(" "),a("p",[s._v("获取Constructor对象是通过Class类中的方法获取的，Class类与Constructor相关的主要方法如下：")]),s._v(" "),a("h3",{attrs:{id:"field类及其用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#field类及其用法"}},[s._v("#")]),s._v(" Field类及其用法")]),s._v(" "),a("h3",{attrs:{id:"method类及其用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method类及其用法"}},[s._v("#")]),s._v(" Method类及其用法")]),s._v(" "),a("h2",{attrs:{id:"反射的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的优点"}},[s._v("#")]),s._v(" 反射的优点")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("可扩展性")]),s._v(" ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。")]),s._v(" "),a("li",[a("strong",[s._v("类浏览器和可视化开发环境")]),s._v(" ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。")]),s._v(" "),a("li",[a("strong",[s._v("调试器和测试工具")]),s._v(" ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。")])]),s._v(" "),a("h2",{attrs:{id:"反射的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的缺点"}},[s._v("#")]),s._v(" 反射的缺点")]),s._v(" "),a("p",[s._v("尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("性能开销")]),s._v(" ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。")]),s._v(" "),a("li",[a("strong",[s._v("安全限制")]),s._v(" ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。")]),s._v(" "),a("li",[a("strong",[s._v("内部暴露")]),s._v(" ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://dunwu.github.io/javacore/advanced/#%F0%9F%93%9A-%E8%B5%84%E6%96%99",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java 高级特性"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);