(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{472:function(t,a,n){"use strict";n.r(a);var e=n(21),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java-基础-注解机制详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-基础-注解机制详解"}},[t._v("#")]),t._v(" Java 基础 - 注解机制详解")]),t._v(" "),n("h2",{attrs:{id:"注解概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解概念"}},[t._v("#")]),t._v(" 注解概念")]),t._v(" "),n("p",[t._v("Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。Annatation(注解)是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation对象，然后通过该 Annotation 对象来获取注解中的元数据信息。JDK1.5版本开始引人注解，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：")]),t._v(" "),n("ul",[n("li",[t._v("生成文档，通过代码里标识的元数据生成javadoc文档。")]),t._v(" "),n("li",[t._v("编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。")]),t._v(" "),n("li",[t._v("编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。")]),t._v(" "),n("li",[t._v("运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);