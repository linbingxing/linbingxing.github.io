(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{467:function(t,a,v){"use strict";v.r(a);var _=v(21),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"java-基础-面向对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-基础-面向对象"}},[t._v("#")]),t._v(" Java 基础 - 面向对象")]),t._v(" "),v("blockquote",[v("p",[t._v("本文主要介绍Java OOP 面向对象基础")])]),t._v(" "),v("h2",{attrs:{id:"三大特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三大特性"}},[t._v("#")]),t._v(" 三大特性")]),t._v(" "),v("h3",{attrs:{id:"封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),v("p",[t._v("封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。")]),t._v(" "),v("h3",{attrs:{id:"继承"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),v("p",[t._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。")]),t._v(" "),v("p",[v("strong",[t._v("继承特点：")])]),t._v(" "),v("ol",[v("li",[t._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),v("strong",[t._v("只是拥有")]),t._v("。")]),t._v(" "),v("li",[t._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),t._v(" "),v("li",[t._v("子类可以用自己的方式实现父类的方法。")])]),t._v(" "),v("h3",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),v("p",[t._v("多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。")]),t._v(" "),v("p",[v("strong",[t._v("多态的特点:")])]),t._v(" "),v("ul",[v("li",[t._v("对象类型和引用类型之间具有继承（类）/实现（接口）的关系；")]),t._v(" "),v("li",[t._v("引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；")]),t._v(" "),v("li",[t._v("多态不能调用“只在子类存在但在父类不存在”的方法；")]),t._v(" "),v("li",[t._v("如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);